<button disabled="@ShowAnimation" data-toggle="tooltip" data-placement="bottom" @attributes="AdditionalAttributes" @onclick="Run">
 @if (ShowAnimation)
 {
  <text>
   <img src="/_content/ITVisions.Blazor/img/ITVButtonProgress.gif" width="20" style="margin-right:8px;" />
  </text>
 }
 @ChildContent
</button>

@code {

 [Parameter] public RenderFragment ChildContent { get; set; }
 [Parameter] public byte AnimationSeconds { get; set; } = 1;

 [Parameter]
 public EventCallback<Microsoft.AspNetCore.Components.Web.MouseEventArgs> onClick { get; set; }
 [Parameter]
 public EventCallback<Exception> onError { get; set; }

 [Parameter(CaptureUnmatchedValues = true)]
 public IDictionary<string, object> AdditionalAttributes { get; set; }

 bool ShowAnimation = false;
 bool Working = false;
 bool MinDone = false;
 System.Timers.Timer t;

 public async Task Run()
 {
  ShowAnimation = false;
  MinDone = false;
  Working = true;

  await this.InvokeAsync(this.StateHasChanged);
  await Task.Delay(1);

  // Animation soll min. x Sekunden laufen
  if (AnimationSeconds > 0)
  {
   ShowAnimation = true;
   t = new System.Timers.Timer(new TimeSpan(0, 0, AnimationSeconds));
   t.AutoReset = false;

   t.Elapsed += (s, e) =>
   {
    MinDone = true;
    if (!Working)
    {
     ShowAnimation = false;
     this.InvokeAsync(this.StateHasChanged);
    }
    t.Close();
   };
   t.Start();
  }

  await this.InvokeAsync(this.StateHasChanged);

  try
  {
   await onClick.InvokeAsync();
  }
  catch (Exception ex)
  {
   if (onError.HasDelegate)
   {
    await onError.InvokeAsync(ex);
   }
   else
   {
    util.Error(ex.ToString()); await util.Alert(ex.Message);
   }
  }
  Working = false;

  if (MinDone)
  {
   ShowAnimation = false;
   await this.InvokeAsync(this.StateHasChanged);
  }
 }


}