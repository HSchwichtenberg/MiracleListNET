@using ITVisions.Blazor
@using Microsoft.JSInterop;
@inject BlazorUtil Util
@inject IJSRuntime JSRuntime
@implements IDisposable

@{
    /* DEMO: 25. Razor Component in RCL (hier: Single-File ohne Code-Behind) */
}

<br />
@((MarkupString)EnvInfo)

<b>RAM used: </b>
@if (usedRAM is null)
{
    <span class="Loading">...</span>
}
else
{
    <span title="Click to run Garbage Collection!" @onclick="GCCollect">
        @(Math.Round((double)(usedRAM.Value), 2)) MB
    </span>
}

<br />
<b>Network Latency:</b>
<NetworkLatency UpdateIntervallSeconds="1"></NetworkLatency>
<br />

@code {
    private double? usedRAM;
    public string Browser { get; set; }
    public string BrowserDetails { get; set; }

    [Parameter]
    public IJSRuntime JS { get; set; }

    [Parameter]
    public System.Reflection.Assembly Assembly { get; set; }

    System.Threading.Timer timer;
    const int UpdateIntervallSekunden = 1;

    public string EnvInfo { get; set; }

    protected override void OnInitialized()
    {

        var d1 = new Dictionary<string, string>();
        //d1.Add("Web Framework", Util.GetBlazorVersionInfo());
        //d1.Add("JavaScript Runtime", JSRuntime.GetType().FullName);
        //d1.Add("Browser", Browser);
        //d1.Add("Browser Details", BrowserDetails);
        //d1.Add(" Client IP", Util.GetClientIP());
        EnvInfo = new ITVisions.EnvInfo(callingAssembly: Assembly, moreInfo: d1).GetHTMLString();

        // Workaround für BD
        if (JS != null)
        {
            this.JSRuntime = JS;
            this.Util = new BlazorUtil(JS, null, null);
        }

        try
        {
            Util.Log("SystemInfo.OnInitializedAsync");

            timer = new System.Threading.Timer(async _ =>
            {
                Calc();
                await InvokeAsync(StateHasChanged);
            }, null, UpdateIntervallSekunden * 1000, UpdateIntervallSekunden * 1000);
        }
        catch (Exception)
        {

            throw;
        }
    }

    public void Dispose()
    {
        // wichtig, damit Timer nicht weiterläuft, wenn die Komponente schon nicht mehr lebt
        if (timer != null) timer.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            Util.Log("OnAfterRender(firstRender=" + firstRender + ")");
            if (firstRender)
            {
                Browser = await Util.GetBrowserShortInfo();
                BrowserDetails = await Util.GetBrowserInfo();
                var d1 = new Dictionary<string, string>();
                d1.Add("Web Framework", Util.GetBlazorVersionInfo());
                d1.Add("JavaScript Runtime", JSRuntime.GetType().FullName);
                d1.Add("Browser", Browser);
                d1.Add("Browser Details", BrowserDetails);
                d1.Add("Client IP", Util.GetClientIP());
                EnvInfo = new ITVisions.EnvInfo(callingAssembly: Assembly, moreInfo: d1).GetHTMLString();
                Calc();
                this.StateHasChanged();
            }
        }
        catch (Exception)
        {

        }
    }

    public async Task GCCollect()
    {
        try
        {
            usedRAM = null;
            this.StateHasChanged();
            GC.Collect();
        }
        catch (Exception ex)
        {
            await Util.Alert(ex.Message);
        }

    }

    public void Calc()
    {

        try
        {
            var proc = System.Diagnostics.Process.GetCurrentProcess();
            usedRAM = (double)proc.PrivateMemorySize64 / 1024 / 1014;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            usedRAM = null;
        }
    }
 }