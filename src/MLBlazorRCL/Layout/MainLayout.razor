@inherits LayoutComponentBase
@using ITVisions.Blazor
@using ITVisions.Blazor.Controls
@using MLBlazorRCL
@inject BlazorUtil Util
@inject NavigationManager NavigationManager

@*Nicht ständig sichtbarer Toast / Einbindung für alle Unterkomponenten*@
<BlazoredToasts Timeout="5" ShowProgressBar="true" Position="Blazored.Toast.Configuration.ToastPosition.BottomLeft" RemoveToastsOnNavigation="true" />
@*Nicht ständig sichtbarer Dialog aus MLBlazorRCL / Einbindung für alle Unterkomponenten*@
<ConfirmDialog></ConfirmDialog>

<div class="row" style="background: white; margin-bottom: 10px">

 <!-- ### Logo links oben -->
 <div class="col-xs-10 col-sm-4 col-md-3 col-lg-2">
  <img @onclick="@ShowAbout" src="/_content/MLBlazorRCL/img/MiracleListLogo.jpg" />
 </div>

 <!-- ### Statusanzeige: Anzeige dieses Blocks oben nur auf großen Displays -->
 <div class="col-xs-6 col-lg-9 col-sm-7 col-md-8 hidden-xs" style="vertical-align: middle;margin-top:10px">
  <CurrentUser></CurrentUser>
 </div>

 <!-- ### Hamburger-Menü rechts oben -->
 <div class="col-xs-1">
  <ul class="nav navbar-nav navbar-right">
   <li class="dropdown">
    <a class="dropdown-toggle" data-toggle="dropdown">
     <span style="font-size: 2.2em" class="glyphicon glyphicon-menu-hamburger icon-primary"></span>
    </a>
    <ul class="dropdown-menu">
     <!-- Menüpunkte für MiracleList-->
     <li><a href="/About">Über diese App</a></li>
     <AuthorizeView>
      <Authorized>
       <li><a href="/Main">MiracleList-Aufgabenverwaltung</a></li>
       <li><a href="/Logout">Logout</a></li>
      </Authorized>
      <NotAuthorized>
       <li><a href="/Login">Login</a></li>
      </NotAuthorized>
     </AuthorizeView>
     <!-- Menüpunkte für weitere Blazor-Beispiele außerhalb von MiracleList-->
     <li><a href="/SamplesList">Blazor-Beispiele außerhalb der MiracleList</a></li>
     <!-- Links ins WWW-->
     <li>
      <a href="https://www.it-visions.de/miraclelist" target="_blank">www.MiracleList.net</a>
     </li>
     <li>
      <a href="https://www.it-visions.de/thema/Blazor"
         target="_blank">Beratung und Schulung zu Blazor</a>
     </li>
     <li>
      <a href="https://www.it-visions.de/BlazorBuch" target="_blank">Fachbuch zu Blazor</a>
     </li>
     <li>
      <a href="https://www.it-visions.de" target="_blank">www.IT-Visions.de</a>
     </li>
     <li>
      <a href="https://www.MAXIMAGO.de" target="_blank">MAXIMAGO GmbH</a>
     </li>
    </ul>
   </li>
  </ul>
 </div>
</div>

<!-- Inhalt der Seiten-->
<div class="container-fluid">
 @Body

 <!-- Alternative Anzeige dieses Blocks unten auf kleinen Displays (!!! Codedopplung, könnte man noch in eine Komponente auslagern !!!) -->
 <div class="row">
  <div class="col-xs-12 hidden-sm hidden-md hidden-lg" style="padding:0px;">
  <CurrentUser></CurrentUser>
  </div>
 </div>
</div>

@code
{
 [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

 protected override async System.Threading.Tasks.Task OnInitializedAsync()
 {
  // Setzt den Seitentitel für Browser-Registerkarte auf Projektnmame und Versionsnummer

  try
  {
   var entryAssemblyName = System.Reflection.Assembly.GetEntryAssembly()?.GetName();
   var projektname = entryAssemblyName?.Name;
   await Util.SetTitle(projektname + " / v" + entryAssemblyName?.Version?.ToString());
  }
  catch (Exception ex)
  {
   // Workaround für Android (dort funktioniert GetEntryAssembly() nicht!)
  }


  // ermittelte den aktuellen Benutzer
  var authState = await authenticationStateTask;
  var user = authState.User;
  if (user.Identity.IsAuthenticated)
  {
   Util.Log($"MainLayout: User {user.Identity.Name} is authenticated!");
  }
  else
  {
   Util.Log("MainLayout: User is NOT authenticated.");
  }
 }

 
 public void ShowAbout()
 {
  // Navigiere zu /About und zurück zur Startseite, wenn auf das Logo geklickt wird
  if (NavigationManager.Uri.ToLower().Contains("/about")) NavigationManager.NavigateTo("/");
  else NavigationManager.NavigateTo("About");
 }
}