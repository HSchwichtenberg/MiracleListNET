@page "/TaskGrid/"
@page "/TaskGrid/{CategoryID:int}"
@using MiracleList;
@using Web;
@inject IAppState AppState
@inject BlazorUtil Util

<h3><a href="/Main"><span id="Remove" title="Ansicht im Datagrid" style="margin-left:20px" class="glyphicon glyphicon glyphicon-arrow-left" b-2bqlus8i2e=""></span></a>All Tasks View: @taskSet?.Count Tasks</h3>

@*DataGid-Kopf*@
<RadzenDataGrid @ref="grid" Data="@taskSet" TItem="BO.Task"
                AllowFiltering="true" AllowColumnResize="true"
                AllowColumnReorder="true" FilterMode="FilterMode.Advanced" PageSize="10" AllowPaging="true" AllowSorting="true" LogicalFilterOperator="LogicalFilterOperator.Or" RowUpdate="@OnUpdateRow">

 @*Spalten*@
 <Columns>
  <RadzenDataGridColumn TItem="BO.Task" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="10%" Reorderable="false" Title="Action">
   <Template Context="t">
    <RadzenButton Icon="edit" title="Edit Task" Style="background-color:#479cc8" Size="ButtonSize.Medium" Click="@(args => EditRow(t))" @onclick:stopPropagation="true">
  
    </RadzenButton>
   </Template>
   <EditTemplate Context="t">
    <RadzenButton title="Save" Style="background-color:#5cb85c" Size="ButtonSize.Medium" Click="@((args) => SaveRow(t))">
     @*Custom Content für Button statt Standardicon, das nicht zum Rest der App passt*@
     <span class="glyphicon glyphicon-floppy-save"></span>

    </RadzenButton>
    <RadzenButton title="Cancel" Style="background-color:#f0ad4e" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(t))">
     @*Custom Content für Button statt Standardicon, das nicht zum Rest der App passt*@
     <span class="glyphicon glyphicon-remove"></span>
    </RadzenButton>
   </EditTemplate>
  </RadzenDataGridColumn>

  <RadzenDataGridColumn TItem="BO.Task" Property="TaskID" Filterable="false" Title="Task-ID" Frozen="true" Width="5%" TextAlign="TextAlign.Center" Reorderable="false">
  </RadzenDataGridColumn>

  <RadzenDataGridColumn TItem="BO.Task" Property="Title" Filterable="true" Title="Title" Width="20%" Reorderable="false">
   <EditTemplate Context="t">
    <RadzenTextBox @bind-Value="t.Title" Style="width:100%; display: block" Name="TaskTitle" />
    <RadzenRequiredValidator Text="Title is required" Component="Title" Popup="true" />
   </EditTemplate>
  </RadzenDataGridColumn>

  <RadzenDataGridColumn TItem="BO.Task" Title="Importance" Sortable="true" Filterable="false" Width="8%" Reorderable="false">
   <Template Context="t">
    <span style="text-align: center" class="badge badge-important" title="Importance: @t.Importance">@t.Importance</span><br>
   </Template>
   <EditTemplate Context="t">

    @*BUG: Bug in RadzenDropDown mit Enum in BW:
    https://forum.radzen.com/t/radzendropdown-with-enum-cast-not-valid/3952
    *@

    <RadzenDropDown @bind-Value="t.Importance" Data="@ImportanceOptions" Style="width:100%" />
   </EditTemplate>
  </RadzenDataGridColumn>

  <RadzenDataGridColumn TItem="BO.Task" Property="Due" Title="Due" Sortable="true" Filterable="false" Width="12%" Reorderable="false">
   <Template Context="t">
    @if (t.Due.HasValue)
     if (t.Due.Value < DateTime.Now.AddDays(-1))
     {
      <div style="color:red">Due since @t.Due.Value.ToShortDateString()</div>
     }
     else
     {
      <div>Due at @t.Due.Value.ToShortDateString()</div>
     }
   </Template>

   <EditTemplate Context="t">
    <RadzenDatePicker @bind-Value="t.Due" />
   </EditTemplate>

  </RadzenDataGridColumn>
  <RadzenDataGridColumn TItem="BO.Task" Property="Note" Filterable="false" Title="Note" Width="70px" Reorderable="false">
   <EditTemplate Context="t">
    <RadzenTextBox @bind-Value="t.Note" Style="width:100%; display: block" Name="TaskNote" />

   </EditTemplate>
  </RadzenDataGridColumn>


 </Columns>
</RadzenDataGrid>

@code {
 List<BO.Task> taskSet { get; set; }

 RadzenDataGrid<BO.Task> grid;

 System.Array ImportanceOptions = System.Enum.GetValues(typeof(BO.Importance));

 [Parameter]
 public int CategoryID { get; set; }

 [Inject]
 public MiracleList.IMiracleListProxy Proxy { get; set; } = null;

 protected override async Task OnParametersSetAsync()
 {
  if (CategoryID != 0)
  { // Eine Aufgabenkategorie in Grid laden
   taskSet = await Proxy.TaskSetAsync(CategoryID, AppState.Token);
  }
  else
  {
   // Alle Aufgabenkategorien in Grid laden
   // Hinweis: Das Backend bietet dafür keine Operation. Daher Iteration über alle Kategorien
   taskSet = new();
   var categorySet = await Proxy.CategorySetAsync(AppState.Token);
   foreach (var c in categorySet)
   {
    taskSet.AddRange(await Proxy.TaskSetAsync(c.CategoryID, AppState.Token));
   }
  }

  Util.Log("TaskSet", taskSet.Count);
 }

 void EditRow(BO.Task t)
 {
  Util.Log("EditRow", t);
  grid.EditRow(t);
 }

 void CancelEdit(BO.Task t)
 {
  Util.Log("CancelEdit", t);
  grid.CancelEditRow(t);
 }

 async Task SaveRow(BO.Task t)
 {
  Util.Log("SaveRow", t);
  await Proxy.ChangeTaskAsync(t, AppState.Token);
  grid.CancelEditRow(t);
 }

 async void OnUpdateRow(BO.Task t)
 {
  Util.Log("OnUpdateRow", t);
 }
}