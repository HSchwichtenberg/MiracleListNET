//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using BO;
using MiracleList;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace MiracleList
{
 [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
 public partial class MiracleListProxy : IMiracleListProxy
 {
  public string BackendUrl = "https://miraclelistbackend.azurewebsites.net/";
  private System.Net.Http.HttpClient _httpClient;
  private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

  public MiracleListProxy(System.Net.Http.HttpClient httpClient)
  {
   _httpClient = httpClient;
   _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
   {
    var settings = new Newtonsoft.Json.JsonSerializerSettings();
    UpdateJsonSerializerSettings(settings);
    return settings;
   });
  }

  public string BaseUrl
  {
   get { return BackendUrl; }
   set { BackendUrl = value; }
  }

  protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

  partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
  partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
  partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
  partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

  /// <summary>Informationen über den Server</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AboutAsync()
  {
   return AboutAsync(System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Informationen über den Server</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<System.Collections.Generic.List<string>> AboutAsync(System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/About");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<string>>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(System.Collections.Generic.List<string>);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Liefert die Version des Servers als Zeichenkette</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<string> VersionAsync()
  {
   return VersionAsync(System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Liefert die Version des Servers als Zeichenkette</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<string> VersionAsync(System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Version");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(string);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Anmeldung mit einer Client-ID, einem Benutzernamen und einem Kennwort. Diese Operation /Login sendet eine GUID als Sitzungstoken zurück, welches in allen folgenden Operationen mitzugeben ist.</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<LoginInfo> LoginAsync(LoginInfo loginInfo)
  {
   return LoginAsync(loginInfo, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Anmeldung mit einer Client-ID, einem Benutzernamen und einem Kennwort. Diese Operation /Login sendet eine GUID als Sitzungstoken zurück, welches in allen folgenden Operationen mitzugeben ist.</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<LoginInfo> LoginAsync(LoginInfo loginInfo, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Login");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(loginInfo, _settings.Value));
     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
     request_.Content = content_;
     request_.Method = new System.Net.Http.HttpMethod("POST");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<LoginInfo>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(LoginInfo);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Abmelden des Benutzers</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<bool> LogoffAsync(string token)
  {
   return LogoffAsync(token, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Abmelden des Benutzers</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<bool> LogoffAsync(string token, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Logoff?");
   if (token != null)
   {
    urlBuilder_.Append("token=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
   }
   urlBuilder_.Length--;

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(bool);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Liste der Kategorien</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<System.Collections.Generic.List<Category>> CategorySetAsync(string mL_AuthToken)
  {
   return CategorySetAsync(mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Liste der Kategorien</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<System.Collections.Generic.List<Category>> CategorySetAsync(string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/CategorySet");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Category>>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(System.Collections.Generic.List<Category>);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Liste der Aufgaben in einer Kategorie</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<System.Collections.Generic.List<BO.Task>> TaskSetAsync(int id, string mL_AuthToken)
  {
   return TaskSetAsync(id, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Liste der Aufgaben in einer Kategorie</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<System.Collections.Generic.List<BO.Task>> TaskSetAsync(int id, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   if (id == null)
    throw new System.ArgumentNullException("id");

   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/TaskSet/{id}");
   urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<BO.Task>>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(System.Collections.Generic.List<BO.Task>);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Details zu einer Aufgabe mit Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<BO.Task> TaskAsync(int id, string mL_AuthToken)
  {
   return TaskAsync(id, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Details zu einer Aufgabe mit Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<BO.Task> TaskAsync(int id, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   if (id == null)
    throw new System.ArgumentNullException("id");

   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Task/{id}");
   urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<BO.Task>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(BO.Task);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Volltextsuche in Aufgaben und Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<System.Collections.Generic.List<Category>> SearchAsync(string text, string mL_AuthToken)
  {
   return SearchAsync(text, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Volltextsuche in Aufgaben und Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<System.Collections.Generic.List<Category>> SearchAsync(string text, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   if (text == null)
    throw new System.ArgumentNullException("text");

   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/Search/{text}");
   urlBuilder_.Replace("{text}", System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture)));

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Category>>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(System.Collections.Generic.List<Category>);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Liste der fälligen Aufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<System.Collections.Generic.List<Category>> DueTaskSetAsync(string mL_AuthToken)
  {
   return DueTaskSetAsync(mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Liste der fälligen Aufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<System.Collections.Generic.List<Category>> DueTaskSetAsync(string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/DueTaskSet");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("GET");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Category>>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(System.Collections.Generic.List<Category>);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Anlegen einer Kategorie</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<Category> CreateCategoryAsync(string name, string mL_AuthToken)
  {
   return CreateCategoryAsync(name, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Anlegen einer Kategorie</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<Category> CreateCategoryAsync(string name, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   if (name == null)
    throw new System.ArgumentNullException("name");

   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/CreateCategory/{name}");
   urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
     request_.Method = new System.Net.Http.HttpMethod("POST");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<Category>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(Category);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Erstellen einer Aufgabe, die im Body im JSON-Format zu übermitteln ist (inkl. Teilaufgaben)</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<BO.Task> CreateTaskAsync(BO.Task t, string mL_AuthToken)
  {
   return CreateTaskAsync(t, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Erstellen einer Aufgabe, die im Body im JSON-Format zu übermitteln ist (inkl. Teilaufgaben)</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<BO.Task> CreateTaskAsync(BO.Task t, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/CreateTask");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(t, _settings.Value));
     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
     request_.Content = content_;
     request_.Method = new System.Net.Http.HttpMethod("POST");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<BO.Task>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(BO.Task);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Ändern einer Aufgabe, die im Body im JSON-Format zu übermitteln ist (inkl. Teilaufgaben)</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<BO.Task> ChangeTaskAsync(BO.Task t, string mL_AuthToken)
  {
   return ChangeTaskAsync(t, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Ändern einer Aufgabe, die im Body im JSON-Format zu übermitteln ist (inkl. Teilaufgaben)</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<BO.Task> ChangeTaskAsync(BO.Task t, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/ChangeTask");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(t, _settings.Value));
     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
     request_.Content = content_;
     request_.Method = new System.Net.Http.HttpMethod("PUT");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<BO.Task>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(BO.Task);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Setzt eine Aufgabe auf "erledigt"</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<BO.Task> ChangeTaskDoneAsync(int? id, bool? done, string mL_AuthToken)
  {
   return ChangeTaskDoneAsync(id, done, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Setzt eine Aufgabe auf "erledigt"</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<BO.Task> ChangeTaskDoneAsync(int? id, bool? done, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/ChangeTaskDone?");
   if (id != null)
   {
    urlBuilder_.Append("id=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
   }
   if (done != null)
   {
    urlBuilder_.Append("done=").Append(System.Uri.EscapeDataString(ConvertToString(done, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
   }
   urlBuilder_.Length--;

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
     request_.Method = new System.Net.Http.HttpMethod("PUT");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<BO.Task>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(BO.Task);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Ändern einer Unteraufgabe</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task<SubTask> ChangeSubTaskAsync(SubTask st, string mL_AuthToken)
  {
   return ChangeSubTaskAsync(st, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Ändern einer Unteraufgabe</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task<SubTask> ChangeSubTaskAsync(SubTask st, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/ChangeSubTask");

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(st, _settings.Value));
     content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
     request_.Content = content_;
     request_.Method = new System.Net.Http.HttpMethod("PUT");
     request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       var objectResponse_ = await ReadObjectResponseAsync<SubTask>(response_, headers_).ConfigureAwait(false);
       return objectResponse_.Object;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }

      return default(SubTask);
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Löschen einer Aufgabe mit allen Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task DeleteTaskAsync(int id, string mL_AuthToken)
  {
   return DeleteTaskAsync(id, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Löschen einer Aufgabe mit allen Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task DeleteTaskAsync(int id, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   if (id == null)
    throw new System.ArgumentNullException("id");

   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/DeleteTask/{id}");
   urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("DELETE");

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       return;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  /// <summary>Löschen einer Kategorie mit allen Aufgaben und Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public System.Threading.Tasks.Task DeleteCategoryAsync(int id, string mL_AuthToken)
  {
   return DeleteCategoryAsync(id, mL_AuthToken, System.Threading.CancellationToken.None);
  }

  /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
  /// <summary>Löschen einer Kategorie mit allen Aufgaben und Teilaufgaben</summary>
  /// <returns>Success</returns>
  /// <exception cref="ApiException">A server side error occurred.</exception>
  public async System.Threading.Tasks.Task DeleteCategoryAsync(int id, string mL_AuthToken, System.Threading.CancellationToken cancellationToken)
  {
   if (id == null)
    throw new System.ArgumentNullException("id");

   var urlBuilder_ = new System.Text.StringBuilder();
   urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/DeleteCategory/{id}");
   urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

   var client_ = _httpClient;
   try
   {
    using (var request_ = new System.Net.Http.HttpRequestMessage())
    {
     if (mL_AuthToken != null)
      request_.Headers.TryAddWithoutValidation("ML-AuthToken", ConvertToString(mL_AuthToken, System.Globalization.CultureInfo.InvariantCulture));
     request_.Method = new System.Net.Http.HttpMethod("DELETE");

     PrepareRequest(client_, request_, urlBuilder_);
     var url_ = urlBuilder_.ToString();
     request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
     PrepareRequest(client_, request_, url_);

     var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
     try
     {
      var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
      if (response_.Content != null && response_.Content.Headers != null)
      {
       foreach (var item_ in response_.Content.Headers)
        headers_[item_.Key] = item_.Value;
      }

      ProcessResponse(client_, response_);

      var status_ = ((int)response_.StatusCode).ToString();
      if (status_ == "200")
      {
       return;
      }
      else
      if (status_ != "200" && status_ != "204")
      {
       var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
       throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
      }
     }
     finally
     {
      if (response_ != null)
       response_.Dispose();
     }
    }
   }
   finally
   {
   }
  }

  protected struct ObjectResponseResult<T>
  {
   public ObjectResponseResult(T responseObject, string responseText)
   {
    this.Object = responseObject;
    this.Text = responseText;
   }

   public T Object { get; }

   public string Text { get; }
  }

  public bool ReadResponseAsString { get; set; }

  protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
  {
   if (response == null || response.Content == null)
   {
    return new ObjectResponseResult<T>(default(T), string.Empty);
   }

   if (ReadResponseAsString)
   {
    var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
    try
    {
     var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
     return new ObjectResponseResult<T>(typedBody, responseText);
    }
    catch (Newtonsoft.Json.JsonException exception)
    {
     var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
     throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
    }
   }
   else
   {
    try
    {
     using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
     using (var streamReader = new System.IO.StreamReader(responseStream))
     using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
     {
      var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
      var typedBody = serializer.Deserialize<T>(jsonTextReader);
      return new ObjectResponseResult<T>(typedBody, string.Empty);
     }
    }
    catch (Newtonsoft.Json.JsonException exception)
    {
     var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
     throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
    }
   }
  }

  private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
  {
   if (value is System.Enum)
   {
    string name = System.Enum.GetName(value.GetType(), value);
    if (name != null)
    {
     var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
     if (field != null)
     {
      var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
          as System.Runtime.Serialization.EnumMemberAttribute;
      if (attribute != null)
      {
       return attribute.Value != null ? attribute.Value : name;
      }
     }
    }
   }
   else if (value is bool)
   {
    return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
   }
   else if (value is byte[])
   {
    return System.Convert.ToBase64String((byte[])value);
   }
   else if (value != null && value.GetType().IsArray)
   {
    var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
    return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
   }

   return System.Convert.ToString(value, cultureInfo);
  }
 }



 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.21.0 (Newtonsoft.Json v11.0.0.0)")]
 public enum TaskImportance
 {
  [System.Runtime.Serialization.EnumMember(Value = @"A")]
  A = 0,

  [System.Runtime.Serialization.EnumMember(Value = @"B")]
  B = 1,

  [System.Runtime.Serialization.EnumMember(Value = @"C")]
  C = 2,

 }

 [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
 public partial class ApiException : System.Exception
 {
  public int StatusCode { get; private set; }

  public string Response { get; private set; }

  public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

  public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
      : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
  {
   StatusCode = statusCode;
   Response = response;
   Headers = headers;
  }

  public override string ToString()
  {
   return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
  }
 }

 [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.4.0 (NJsonSchema v10.0.21.0 (Newtonsoft.Json v11.0.0.0))")]
 public partial class ApiException<TResult> : ApiException
 {
  public TResult Result { get; private set; }

  public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
      : base(message, statusCode, response, headers, innerException)
  {
   Result = result;
  }
 }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108