@page "/Samples/MultiThreading"
@using ITVisions.Blazor;
@inject BlazorUtil util

<h1>MultiThreading</h1>

<PageTitle>MultiThreading Demo</PageTitle>
<hr />

<h3>Counter</h3>
<p role="status">Status: @currentCount</p>
<button class="btn btn-primary" @onclick="IncrementCount">+1</button>
<hr />

<h3>Lange Berechnung</h3>

<p role="status">Status: @status</p>
<p role="status">Result: @result</p>

<div style="display: block;background-color:#f1f1f1!important">
 <div style="display: block;background-color:lawngreen;width:@Fortschritt%">Fortschritt:&nbsp;@Fortschritt%</div>
</div>

<button class="btn btn-primary" @onclick="IncrementCountAsync">starten</button>

@code {
 private long currentCount = 0;
 private long? result = null;
 string status = "";
 long iterations = 10000000;
 private byte Fortschritt { get; set; } = 0;

 private void IncrementCount()
 {
  currentCount++;
 }

 private async Task IncrementCountAsync()
 {
  Console.WriteLine("Increment called");

  _ = Calc();

  status = "Lange Berechnung gestartet...";
  result = 0;

  Console.WriteLine($"Lange Berechnung gestartet...");
 }

 private Task<int> Calc()
 {
  return Task.Run(() =>
  {
   Console.WriteLine("Task started");

   if (util.IsWebAssembly) iterations = iterations / 10;
   for (long x = 0; x <= iterations; ++x)
   {
    x.ToString();

    if (!util.IsWebAssembly) { Task.Delay(200); }
    result = x;

    if (x % (iterations / 10) == 0)
    {
     Fortschritt = (byte) (ITVisions.MathUtil.Anteil(x, iterations) * 100);
     InvokeAsync(this.StateHasChanged);
     util.Log(Fortschritt + ": " + x);
    }


   }
   status = "Lange Berechnung beendet!";
   InvokeAsync(this.StateHasChanged);
   Console.WriteLine("Task ended!");

   return 0;
  });
 }
}
